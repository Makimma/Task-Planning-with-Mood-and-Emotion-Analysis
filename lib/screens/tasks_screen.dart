import 'package:flutter/cupertino.dart';
import 'package:flutter/material.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:flutter_appp/services/task_actions.dart';
import 'package:flutter_appp/widgets/task_card.dart';
import '../widgets/app_dropdown.dart';

class TasksScreen extends StatefulWidget {
  @override
  _TasksScreenState createState() => _TasksScreenState();
}

class _TasksScreenState extends State<TasksScreen> {
  List<Map<String, dynamic>> allTasks = [];  // üîπ –í—Å–µ –∑–∞–¥–∞—á–∏
  List<Map<String, dynamic>> filteredTasks = []; // üîπ –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏

  String selectedCategory = "–í—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏";
  bool filterByDeadline = false;
  bool filterByPriority = false;
  bool filterByEmotionalLoad = false;

  String selectedSortOption = "–î–µ–¥–ª–∞–π–Ω";
  final User? user = FirebaseAuth.instance.currentUser;
  final List<String> taskCategories = [
    "–í—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏",
    "–†–∞–±–æ—Ç–∞",
    "–£—á—ë–±–∞",
    "–§–∏–Ω–∞–Ω—Å—ã",
    "–ó–¥–æ—Ä–æ–≤—å–µ –∏ —Å–ø–æ—Ä—Ç",
    "–†–∞–∑–≤–∏—Ç–∏–µ –∏ —Ö–æ–±–±–∏",
    "–õ–∏—á–Ω–æ–µ",
    "–î–æ–º–∞—à–Ω–∏–µ –¥–µ–ª–∞",
    "–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è –∏ –¥–æ—Å—É–≥"
  ];

  @override
  void initState() {
    super.initState();
    _fetchTasks("active");
  }

  @override
  Widget build(BuildContext context) {
    return DefaultTabController(
      length: 2,
      child: Scaffold(
        appBar: AppBar(
          titleSpacing: 0,
          actions: [
            IconButton(
              icon: Icon(Icons.filter_list),
              onPressed: () {
                _showFilterDialog(context);
              },
            ),
          ],
          title: Row(
            children: [
              SizedBox(width: 16), // ‚úÖ –û—Ç—Å—Ç—É–ø –æ—Ç –∫—Ä–∞—è —ç–∫—Ä–∞–Ω–∞
              AppDropdown(
                selectedOption: selectedSortOption,
                options: ["–î–µ–¥–ª–∞–π–Ω", "–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç", "–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞"],
                maxWidth: 140, // ‚úÖ –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —à–∏—Ä–∏–Ω—É
                onOptionSelected: (value) {
                  setState(() {
                    selectedSortOption = value;
                  });
                },
              ),
              SizedBox(width: 10), // ‚úÖ –û—Ç—Å—Ç—É–ø –ø–µ—Ä–µ–¥ –≤—Ç–æ—Ä—ã–º –≤—ã–ø–∞–¥–∞—é—â–∏–º —Å–ø–∏—Å–∫–æ–º
              // Flexible(
              //   child: DropdownButton<String>(
              //     value: taskCategories.contains(selectedCategory)
              //         ? selectedCategory
              //         : "–í—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏",
              //     items: taskCategories.toSet().map((String value) {
              //       return DropdownMenuItem<String>(
              //         value: value,
              //         child: Text(value,
              //             overflow: TextOverflow
              //                 .ellipsis),
              //       );
              //     }).toList(),
              //     onChanged: (value) {
              //       setState(() {
              //         selectedCategory = value!;
              //       });
              //     },
              //   ),
              // ),
            ],
          ),
        ),
        body: TabBarView(
          children: [
            _buildTaskList("active"),
            _buildTaskList("completed"),
          ],
        ),
        floatingActionButton: FloatingActionButton(
          onPressed: () => _showAddTaskDialog(context),
          child: Icon(Icons.add),
        ),
      ),
    );
  }

  void _fetchTasks(String status) async {
    User? user = FirebaseAuth.instance.currentUser;
    if (user == null) return;

    QuerySnapshot snapshot = await FirebaseFirestore.instance
        .collection('users')
        .doc(user.uid)
        .collection('tasks')
        .where('status', isEqualTo: status)
        .get();

    setState(() {
      allTasks = snapshot.docs.map((doc) {
        return {
          'id': doc.id,
          ...doc.data() as Map<String, dynamic>,
        };
      }).toList();

      _applyFilters();
    });
  }

  void _applyFilters() {
    setState(() {
      if (!filterByDeadline && !filterByPriority && !filterByEmotionalLoad && selectedCategory == "–í—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏") {
        filteredTasks = List.from(allTasks);
        return;
      }

      filteredTasks = allTasks.where((task) {
        bool matches = true;

        if (selectedCategory != "–í—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏") {
          matches &= task['category'] == selectedCategory;
        }
        if (filterByDeadline) {
          matches &= task['deadline'] != null;
        }
        if (filterByPriority) {
          matches &= task['priority'] == "high";
        }
        if (filterByEmotionalLoad) {
          matches &= task['emotionalLoad'] > 3;
        }
        return matches;
      }).toList();
    });
  }

  void _showFilterDialog(BuildContext context) {
    showDialog(
      context: context,
      builder: (context) {
        return StatefulBuilder(
          builder: (context, setState) {
            return AlertDialog(
              title: Text("–§–∏–ª—å—Ç—Ä –∑–∞–¥–∞—á"),
              content: Column(
                mainAxisSize: MainAxisSize.min,
                children: [
                  // –§–∏–ª—å—Ç—Ä –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                  DropdownButtonFormField<String>(
                    value: selectedCategory,
                    items: ["–í—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏", "–†–∞–±–æ—Ç–∞", "–£—á—ë–±–∞", "–§–∏–Ω–∞–Ω—Å—ã", "–ó–¥–æ—Ä–æ–≤—å–µ –∏ —Å–ø–æ—Ä—Ç", "–õ–∏—á–Ω–æ–µ"]
                        .map((String value) {
                      return DropdownMenuItem<String>(
                        value: value,
                        child: Text(value),
                      );
                    }).toList(),
                    onChanged: (value) {
                      setState(() {
                        selectedCategory = value!;
                      });
                    },
                    decoration: InputDecoration(labelText: "–ö–∞—Ç–µ–≥–æ—Ä–∏—è"),
                  ),
                  SizedBox(height: 10),

                  // –§–∏–ª—å—Ç—Ä –ø–æ –¥–µ–¥–ª–∞–π–Ω—É
                  CheckboxListTile(
                    title: Text("–§–∏–ª—å—Ç—Ä –ø–æ –¥–µ–¥–ª–∞–π–Ω—É"),
                    value: filterByDeadline,
                    onChanged: (value) {
                      setState(() {
                        filterByDeadline = value!;
                      });
                    },
                  ),

                  // –§–∏–ª—å—Ç—Ä –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É
                  CheckboxListTile(
                    title: Text("–§–∏–ª—å—Ç—Ä –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É"),
                    value: filterByPriority,
                    onChanged: (value) {
                      setState(() {
                        filterByPriority = value!;
                      });
                    },
                  ),

                  // –§–∏–ª—å—Ç—Ä –ø–æ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π –Ω–∞–≥—Ä—É–∑–∫–µ
                  CheckboxListTile(
                    title: Text("–§–∏–ª—å—Ç—Ä –ø–æ –Ω–∞–≥—Ä—É–∑–∫–µ"),
                    value: filterByEmotionalLoad,
                    onChanged: (value) {
                      setState(() {
                        filterByEmotionalLoad = value!;
                      });
                    },
                  ),
                ],
              ),
              actions: [
                TextButton(
                  onPressed: () {
                    Navigator.pop(context); // –ó–∞–∫—Ä—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥ –±–µ–∑ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è
                  },
                  child: Text("–û—Ç–º–µ–Ω–∞"),
                ),
                ElevatedButton(
                  onPressed: () {
                    _applyFilters(); // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é
                    Navigator.pop(context); // –ó–∞–∫—Ä—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥
                  },
                  child: Text("–ü—Ä–∏–º–µ–Ω–∏—Ç—å"),
                ),
              ],
            );
          },
        );
      },
    );
  }


  String _getPriorityText(String priority) {
    switch (priority) {
      case 'high':
        return "–í—ã—Å–æ–∫–∏–π";
      case 'medium':
        return "–°—Ä–µ–¥–Ω–∏–π";
      case 'low':
        return "–ù–∏–∑–∫–∏–π";
      default:
        return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ";
    }
  }

  void _showAddTaskDialog(BuildContext context) {
    final _formKey = GlobalKey<FormState>();
    String title = "";
    String comment = "";
    String category = "–†–∞–±–æ—Ç–∞";
    String priority = "medium";
    int emotionalLoad = 3;
    DateTime deadline = DateTime.now();

    showDialog(
      context: context,
      builder: (context) {
        return AlertDialog(
          title: Text("–î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É"),
          content: StatefulBuilder(
            builder: (context, setState) {
              return Form(
                key: _formKey,
                child: Column(
                  mainAxisSize: MainAxisSize.min,
                  children: [
                    TextFormField(
                      decoration: InputDecoration(labelText: "–ù–∞–∑–≤–∞–Ω–∏–µ"),
                      maxLength: 50,
                      validator: (value) {
                        if (value == null || value.trim().isEmpty) {
                          return "–ù–∞–∑–≤–∞–Ω–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ";
                        } else if (value.length > 50) {
                          return "–ú–∞–∫—Å–∏–º—É–º 50 —Å–∏–º–≤–æ–ª–æ–≤";
                        }
                        return null;
                      },
                      onChanged: (value) => title = value,
                    ),
                    TextFormField(
                      decoration: InputDecoration(
                          labelText: "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ)"),
                      maxLength: 512,
                      onChanged: (value) => comment = value,
                    ),
                    DropdownButtonFormField<String>(
                      value: category,
                      items: taskCategories.map((String value) {
                        return DropdownMenuItem<String>(
                          value: value,
                          child: Text(value),
                        );
                      }).toList(),
                      onChanged: (value) => setState(() => category = value!),
                      decoration: InputDecoration(labelText: "–ö–∞—Ç–µ–≥–æ—Ä–∏—è"),
                    ),
                    DropdownButtonFormField<String>(
                      value: priority,
                      items: ["high", "medium", "low"].map((String value) {
                        return DropdownMenuItem<String>(
                          value: value,
                          child: Text(_getPriorityText(value)),
                        );
                      }).toList(),
                      onChanged: (value) => setState(() => priority = value!),
                      decoration: InputDecoration(labelText: "–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç"),
                    ),
                    Slider(
                      value: emotionalLoad.toDouble(),
                      min: 1,
                      max: 5,
                      divisions: 4,
                      label: emotionalLoad.toString(),
                      onChanged: (value) =>
                          setState(() => emotionalLoad = value.toInt()),
                    ),
                    ElevatedButton(
                      onPressed: () {
                        _showDateTimePicker(context, deadline,
                            (DateTime newDate) {
                          setState(() {
                            deadline = newDate;
                          });
                        });
                      },
                      child: Text("–í—ã–±—Ä–∞—Ç—å –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è"),
                    ),
                  ],
                ),
              );
            },
          ),
          actions: [
            TextButton(
              onPressed: () => Navigator.pop(context),
              child: Text("–û—Ç–º–µ–Ω–∞"),
            ),
            ElevatedButton(
              onPressed: () {
                if (_formKey.currentState!.validate()) {
                  _addTask(title, comment, category, priority, emotionalLoad,
                      deadline);
                  Navigator.pop(context);
                }
              },
              child: Text("–°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É"),
            ),
          ],
        );
      },
    );
  }

  void _addTask(String title, String comment, String category, String priority,
      int emotionalLoad, DateTime deadline) {
    if (title.isEmpty) return;

    FirebaseFirestore.instance
        .collection('users')
        .doc(user!.uid)
        .collection('tasks')
        .add({
      'title': title,
      'comment': comment,
      'category': category,
      'priority': priority,
      'emotionalLoad': emotionalLoad,
      'deadline': Timestamp.fromDate(deadline),
      'status': 'active',
      'createdAt': Timestamp.now(),
    });
  }

  void _showDateTimePicker(BuildContext context, DateTime initialDate,
      Function(DateTime) onDateTimeSelected) {
    DateTime now = DateTime.now();
    DateTime minDateTime =
        DateTime(now.year, now.month, now.day, now.hour, now.minute);
    DateTime selectedDateTime =
        initialDate.isBefore(minDateTime) ? minDateTime : initialDate;

    showModalBottomSheet(
      context: context,
      isScrollControlled: true,
      builder: (context) {
        return Container(
          height: 350,
          padding: EdgeInsets.only(bottom: 20),
          child: Column(
            children: [
              Expanded(
                child: CupertinoDatePicker(
                  mode: CupertinoDatePickerMode.dateAndTime,
                  initialDateTime: selectedDateTime,
                  minimumDate: minDateTime,
                  maximumDate: DateTime(2100),
                  use24hFormat: true,
                  onDateTimeChanged: (DateTime newDateTime) {
                    selectedDateTime = newDateTime;
                  },
                ),
              ),
              Padding(
                padding: EdgeInsets.only(bottom: 10),
                child: ElevatedButton(
                  onPressed: () {
                    onDateTimeSelected(selectedDateTime);
                    Navigator.pop(context);
                  },
                  child: Text("–ì–æ—Ç–æ–≤–æ"),
                ),
              ),
            ],
          ),
        );
      },
    );
  }

  Widget _buildTaskList(String status) {
    return StreamBuilder<QuerySnapshot>(
      stream: FirebaseFirestore.instance
          .collection('users')
          .doc(user!.uid)
          .collection('tasks')
          .where('status', isEqualTo: status)
          .snapshots(),
      builder: (context, snapshot) {
        if (snapshot.connectionState == ConnectionState.waiting) {
          return Center(child: CircularProgressIndicator());
        }

        if (!snapshot.hasData || snapshot.data!.docs.isEmpty) {
          return Center(child: Text("–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∑–∞–¥–∞—á–∏"));
        }
        if (filteredTasks.isEmpty && allTasks.isNotEmpty) {
          return Center(child: Text("–ù–µ—Ç –∑–∞–¥–∞—á, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö —Ñ–∏–ª—å—Ç—Ä—É"));
        }

        List<Map<String, dynamic>> tasks = snapshot.data!.docs.map((doc) {
          return {
            'id': doc.id,
            ...doc.data() as Map<String, dynamic>,
          };
        }).toList();

        tasks.sort((a, b) {
          if (selectedSortOption == "–î–µ–¥–ª–∞–π–Ω") {
            return (a['deadline'] as Timestamp)
                .compareTo(b['deadline'] as Timestamp);
          } else if (selectedSortOption == "–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç") {
            Map<String, int> priorityOrder = {"high": 3, "medium": 2, "low": 1};
            return priorityOrder[a['priority']]!
                .compareTo(priorityOrder[b['priority']]!);
          } else if (selectedSortOption == "–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞") {
            return a['emotionalLoad'].compareTo(b['emotionalLoad']);
          }
          return 0;
        });

        return ListView.builder(
          physics: BouncingScrollPhysics(),
          itemCount: filteredTasks.length,
          itemBuilder: (context, index) {
            if (index == filteredTasks.length) {
              return SizedBox(height: 100);
            }
            final task = filteredTasks[index];

            return Dismissible(
                key: Key(task['id']),
                direction: DismissDirection.endToStart,
                background: Container(
                  color: Colors.red,
                  alignment: Alignment.centerRight,
                  padding: EdgeInsets.symmetric(horizontal: 20),
                  child: Icon(Icons.delete, color: Colors.white, size: 30),
                ),
                confirmDismiss: (direction) async {
                  return await TaskActions.showDeleteConfirmation(context, task['id']);
                },
                child: TaskCard(
                  task: task,
                  onEdit: () => TaskActions.showEditTaskDialog(context, task),
                  onComplete: () => TaskActions.completeTask(task['id']),
                )
            );
          },
        );
      },
    );
  }
}
