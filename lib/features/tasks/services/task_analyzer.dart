import 'dart:async';
import 'dart:io';

import 'package:connectivity_plus/connectivity_plus.dart';
import 'package:flutter/material.dart';
import 'category_service.dart';
import '../../../core/services/nlp_service.dart';
import '../../../constants/task_constants.dart';

class TaskAnalyzer {
  static Future<void> analyzeCategory({
    required String title,
    required String comment,
    required BuildContext context,
    required Function(String) onSuccess,
    required Function(String) onError,
  }) async {
    // Check if both fields are empty or contain only whitespace
    final trimmedTitle = title.trim();
    final trimmedComment = comment.trim();
    if (trimmedTitle.isEmpty && trimmedComment.isEmpty) {
      onError('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–ª–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞');
      return;
    }

    try {
      final connectivityResult = await Connectivity().checkConnectivity();
      if (connectivityResult == ConnectivityResult.none) {
        onError('–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É');
        return;
      }

      final formattedTitle = trimmedTitle.endsWith('.') ? trimmedTitle : "$trimmedTitle.";
      final fullText = "$formattedTitle $trimmedComment";

      final response = await CategoryService.classifyText(fullText);
      final resolvedCategory = _resolveCategory(response);
      onSuccess(resolvedCategory);
    } catch (e) {
      _handleError(e, onError);
    }
  }

  static Future<void> analyzeEmotionalLoad({
    required String title,
    required String comment,
    required BuildContext context,
    required Function(int) onSuccess,
    required Function(String) onError,
  }) async {
    // Check if both fields are empty or contain only whitespace
    final trimmedTitle = title.trim();
    final trimmedComment = comment.trim();
    if (trimmedTitle.isEmpty && trimmedComment.isEmpty) {
      onError('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–ª–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞');
      return;
    }

    try {
      final connectivityResult = await Connectivity().checkConnectivity();
      if (connectivityResult == ConnectivityResult.none) {
        onError('–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É');
        return;
      }

      final formattedTitle = trimmedTitle.endsWith('.') ? trimmedTitle : "$trimmedTitle.";
      final fullText = "$formattedTitle $trimmedComment";

      final sentiment = await NaturalLanguageService.analyzeSentiment(fullText);
      if (sentiment == null) {
        onError('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—É—é –Ω–∞–≥—Ä—É–∑–∫—É');
        return;
      }

      final loadLevel = _convertSentimentToLoad(
        sentiment["score"]!,
        sentiment["magnitude"]!,
      );

      onSuccess(loadLevel);
    } catch (e) {
      _handleError(e, onError);
    }
  }

  static String _resolveCategory(String? category) {
    if (category != null && TaskConstants.categories.contains(category)) {
      return category;
    }
    return "–î—Ä—É–≥–æ–µ";
  }

  static int _convertSentimentToLoad(double score, double magnitude) {
    int load;

    if (magnitude < 0.05) {
      load = 1;
    } else if (magnitude < 0.10) {
      load = 2;
    } else if (magnitude < 0.15) {
      load = 3;
    } else if (magnitude < 0.20) {
      load = 4;
    } else {
      load = 5;
    }

    if (score >= 0.3 && load > 1) {
      load--;
    }
    else if (score <= -0.3 && load < 5) {
      load++;
    }

    return load;
  }


  //TODO
  static void _handleError(dynamic error, Function(String) onError) {
    if (error is SocketException) {
      onError('–°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ üåê');
    } else if (error is TimeoutException) {
      onError('–°–µ—Ä–≤–µ—Ä –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ ‚è≥');
    } else {
      final errorMessage = error.toString().split(':').first;
      if (errorMessage.contains('Exception')) {
        onError('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ üòï');
      } else {
        onError('–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ üîÑ');
      }
    }
  }
}